<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sisypheanchen.github.io</id>
    <title>Sisyphean</title>
    <updated>2022-02-21T08:27:26.511Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sisypheanchen.github.io"/>
    <link rel="self" href="https://sisypheanchen.github.io/atom.xml"/>
    <subtitle>推着石头，寻求人生的意义</subtitle>
    <logo>https://sisypheanchen.github.io/images/avatar.png</logo>
    <icon>https://sisypheanchen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Sisyphean</rights>
    <entry>
        <title type="html"><![CDATA[基于图像识别与目标检测的自动化测试]]></title>
        <id>https://sisypheanchen.github.io/post/ji-yu-tu-xiang-shi-bie-yu-mu-biao-jian-ce-de-zi-dong-hua-ce-shi/</id>
        <link href="https://sisypheanchen.github.io/post/ji-yu-tu-xiang-shi-bie-yu-mu-biao-jian-ce-de-zi-dong-hua-ce-shi/">
        </link>
        <updated>2021-12-27T10:59:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="背景">背景</h1>
<p>财付通风控每天都面临着各类的欺诈、盗号、作弊、套现以及营销活动被恶意刷单、恶意抢占资源等风险，所以风控团队采用的主要手段就是制定策略在实时业务请求中识别出恶意交易进行拦截，策略制定后对策略进行验证后上线。</p>
<p>产品人员在策略等相关配置后，需要人为在测试环境（线上预发布）验证各配置的正确性。一般需要3-5个工作日才能完成验证，严重影响了策略发布效率。</p>
<h2 id="案例说明">案例说明</h2>
<p>以下为诈骗C拦截完整流程的一个案例，从开始交易拦截到最终尽调解脱，经风险须知、表单风险确认和人脸身份验证过程，接触交易限制。在此过程中，产品测试人员需确认每个环节都符合预期。当然，可以看到在每个环节中，流程都可以终止。</p>
<figure data-type="image" tabindex="1"><img src="https://sisypheanchen.github.io/post-images/1640605393943.png" alt="" loading="lazy"></figure>
<p>以上案例场景，为拦截可解脱。此外，还有轻提醒、拦截（FAQ）、拦截（不可解脱）等场景，各场景呈现不同的页面样式特征和体验流程，后续内容会进行详细介绍。</p>
<h1 id="面临的挑战">面临的挑战</h1>
<p>挑战1：上线前测试验证周期长。涉及模块多、链路长，测试准备工作分散，沟通协调成本大，上线前测试验证周期平均3~5个工作日。而且全流程人工体验，耗时耗力易遗漏。</p>
<figure data-type="image" tabindex="2"><img src="https://sisypheanchen.github.io/post-images/1640605402850.png" alt="" loading="lazy"></figure>
<p>挑战2：已上线配置回归测试挑战大。当前已上线超500个错误码场景，全量回归测试挑战是非常大的。<br>
<img src="https://sisypheanchen.github.io/post-images/1640605408340.png" alt="" loading="lazy"></p>
<h1 id="系统边界">系统边界</h1>
<h2 id="关键点分析">关键点分析</h2>
<p>总体上，我们需要解决两类问题，一类是冒烟测试，一类是回归测试。我们解决的重点问题，如何实现测试自动化。</p>
<p>回归测试，即历史测试用例的再执行，如果解决了冒烟测试问题，回归测试也就迎刃而解。</p>
<p>那么问题进一步聚焦，如何实现冒烟测试自动化？</p>
<p>核心有两点：</p>
<ul>
<li>一是终端模拟用户操作</li>
<li>二是能自动检测识别特征，与预期的原型（或原型实例化成的测试用例）做对比</li>
</ul>
<p>我们暂且以上两部分叫做<strong>模拟终端</strong>和<strong>图像模块</strong>。</p>
<p>模拟终端比较好理解，可以把终端理解成木得感情的机器人🤖️ 它主要做两件事情：</p>
<ul>
<li>在哪里（元素坐标）</li>
<li>做什么（点击、输入、截图等手机操作系统支持的人为交互操作）</li>
</ul>
<h2 id="图像模块">图像模块</h2>
<p>找到感兴趣的特征及其位置<br>
判断实际运行的截图与预期是否有偏差<br>
总结来说，模拟终端模拟人的动作，图像模块帮助查找特征与对比。</p>
<h2 id="测试用例的理解">测试用例的理解</h2>
<p>模拟终端+图像模块的组合，只是测试流程中的某个孤立点，完整的流程是由点连成线的，并且在点的衔接中可能有输入性交互。因此，还需要一个额外的能力去串联各个孤立的点，本文约定此名为“总线”。</p>
<figure data-type="image" tabindex="3"><img src="https://sisypheanchen.github.io/post-images/1640605954266.png" alt="" loading="lazy"></figure>
<p>在业务层面，总线本质上就是测试用例枢纽定义。</p>
<p>测试用例的定义，跟具体的业务场景有关。有何结合业务去巧妙地拆解测试过程中的关注点，关系到能否避免自动化智能测试演变成“智障”测试。</p>
<p>首先，这两类问题需要解决的一个前提条件，是测试链路打通（测试环境上下文的准备）。针对模块多，链路长的问题，我们把所有的模块资源整合起来，抽象封装操作能力选项，在产品策略设计阶段就映射落实好，这样测试时的多方协调工作，就已经关联好了。</p>
<h1 id="系统架构">系统架构</h1>
<p>通过上述分析，明确了几个重要边界：模拟终端、图像模块、总线和体验引擎。</p>
<figure data-type="image" tabindex="4"><img src="https://sisypheanchen.github.io/post-images/1640605971349.png" alt="" loading="lazy"></figure>
<p><em>&quot;架构设计把流程中类似的功能节点抽象成模块，每个模块内聚功能的实现，通过总线与其它模块通信，最终达到体验流程自动化的目标。在具体的实现中，每个模块拆分成对应的微服务并提供原子服务接口，同时会把总线抽象成一个微服务（类似于服务注册中心），集成管理各模块的协议与服务调用。&quot;</em></p>
<figure data-type="image" tabindex="5"><img src="https://sisypheanchen.github.io/post-images/1640605979430.png" alt="" loading="lazy"></figure>
<p>总线，终端模拟和体验引擎概念本身比较好理解。本文重点介绍图像模块。</p>
<h1 id="图像模块-2">图像模块</h1>
<p>图像模块找到感兴趣的特征，涉及交互的特征还需要输出位置信息，供模拟引擎使用。图像的与预期一致的对比，则需要结合业务定义，比较初级的对比主要是特征的比对（如特征个数，文字信息）。以下列举了几个业务场景的体验流程。</p>
<figure data-type="image" tabindex="6"><img src="https://sisypheanchen.github.io/post-images/1640606093655.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://sisypheanchen.github.io/post-images/1640606101110.png" alt="" loading="lazy"></figure>
<p>不同场景所需要建立的特征工程不同。比如弹窗页面，关注弹窗内容以及按钮选项；FAQ页面，关注提示的FAQ文本信息；风险提示页面，关注风险提示文本以及按钮选项，有些需要关注复选框信息以及对应的文本选项内容。</p>
<p>以上我们可以看出，如果采用单个模型去解决这类问题是比较复杂的。一个可靠的方案是按照识别场景，将复杂的特征提取转换成图像分类 + 目标检测问题。</p>
<figure data-type="image" tabindex="8"><img src="https://sisypheanchen.github.io/post-images/1640606116816.png" alt="" loading="lazy"></figure>
<p>第一步是分类（自动或人工）场景，这样做一方面可以避免盲目检索带来的误差，另一方面可以加快检索效率。</p>
<p>第二步针对不同场景建立特征工程；比如弹窗场景检测矩形弹窗以及按钮，纯文本场景截取空白区域的文字即可。</p>
<p>当然，在此过程中，一些特征工程算法是可以组合共用的，这些能力可以逐步沉淀。</p>
<h2 id="图像分类">图像分类</h2>
<p>在大多数开发团队，拥有足够大的数据集去重头开始训练模型是不现实的，少样本量的迁移学习通常是最优选择。在ImageNet等大数据集上的预训练模型，已经具备了非常好的特征提取能力。</p>
<p>因此，仅需在预训练模型基础上，改造全连接层以适应实际业务场景。我们使用了ResNet 18 模型迁移训练，识别截图场景，进一步聚焦。</p>
<h2 id="目标检测与图像分割">目标检测与图像分割</h2>
<p>场景聚焦完成后，路由到对应的场景，检测场景中感兴趣的特征。在初期的简单场景中，采用了OpenCV算法提取图像特征，如弹窗、按钮、复选框、图标等等。这里面主要使用了自适应阈值化降噪、矩形检测、Hough变换和SIFT匹配等等。检测到感兴趣的领域就可以分割图片了。</p>
<figure data-type="image" tabindex="9"><img src="https://sisypheanchen.github.io/post-images/1640606147472.png" alt="" loading="lazy"></figure>
<p>SIFT特征匹配</p>
<figure data-type="image" tabindex="10"><img src="https://sisypheanchen.github.io/post-images/1640606160269.png" alt="" loading="lazy"></figure>
<p>OCR：当特征比对结果不符合我们预期时，需要有一种兜底的比对策略，基于内容的比对。OCR把图片中各元素的文字识别出来，然后与目标文案做相似度的比较，如果符合预期，也可以通过体验（一般的配置发布，主要是涉及页面文案的更新）。</p>
<p>在当前的场景中，特征比对方式简单暴力，初期阶段由于样式简单丢弃了位置信息的比对，主要比对检测目标的类型以及数量是否一致。</p>
<h2 id="高并发高可用">高并发高可用</h2>
<p>Python在分类模型和OpenCV领域具良好的开源生态，我们在服务开发和部署采用了python语言。在服务的高并发与高可用上，做了以下工作。</p>
<p><strong>高并发</strong>：Gunicorn提升flask应用的处理能力，Gunicorn提供了三种不同的模式：work模式、多进程模式、伪线程”模式，用来提升并发处理能力，他们的适应场景不同。由于我们的场景更多受限于图片传输网络IO，采用了Gunicorn + gevent的协程工作模式。</p>
<p><strong>高可用</strong>：Supervisor是一个使用Python开发的进程管理程序supervisor ，可以监控和异常自动拉起监控的进程。</p>
<h1 id="未来规划">未来规划</h1>
<p>业务场景主要覆盖了样式相对比较固定的业务流程，高度自定义的表单样式尚未覆盖。并且，于人工特征目标检测，泛化能力相对较弱，对于表单场景挑战很大。下一步规划是基于已有数据，扩展模型，主要是训练深度模型如YOLO算法，来更好抽象场景，减少人工特征的工作。</p>
<figure data-type="image" tabindex="11"><img src="https://sisypheanchen.github.io/post-images/1640606193701.png" alt="" loading="lazy"></figure>
<h1 id="总结">总结</h1>
<p>本文介绍了一种基于图像识别和目标检测的自动化测试方案， 相比基于前端的自动化测试方案，该方案不需要前期的录制工作即可实现自动化冒烟测试。对于场景较多，差异较大的业务问题，本文提出了一种“图像分类 + 目标检测”算法分层的方案，来简化特征工程。</p>
<p>当然，我们的项目还在初期阶段，还有诸多深入探索空间，非常非常欢迎来一起探讨图像以及自动化测试相关领域的任何问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring boot 单元测试]]></title>
        <id>https://sisypheanchen.github.io/post/spring-boot-dan-yuan-ce-shi/</id>
        <link href="https://sisypheanchen.github.io/post/spring-boot-dan-yuan-ce-shi/">
        </link>
        <updated>2021-04-29T07:44:49.000Z</updated>
        <content type="html"><![CDATA[<p>本篇文章主要介绍spring boot单元测试遇到的<strong>依赖注入</strong>的问题。<br>
传统的spring boot应用大量使用注解的方式，将对象的管理交给spring boot内置容器</p>
<p>在进行单元测试的时候，常规的单元测试并没有启动容器去管理实例，以及容器的上下文信息。</p>
<p>本文主要针对这两点进行了讲解，并提出了一个隔离数据库的方法</p>
<p>https://www.baeldung.com/spring-boot-testing</p>
<p>以下是spring boot项目的demo, 在实际运行中，有几点需要注意<br>
1.SpringBootTest 注解，跟文章稍有不同，可能是版本的差异；class中的application即为该项目的application，引入包的时候需要匹配<br>
2.TestPropertySource是提供上下文信息的地方，这里指定期望的配置路径即可<br>
3.启动单元测试的时候，会编译整个项目</p>
<pre><code>package com.tenpay.risk.rap.basic.core.service;

import com.tencent.ard.common.api.entity.ResponseEntity;
import com.tenpay.risk.rap.basic.api.request.var.AccountAuthorityApplyReqVo;
import com.tenpay.risk.rap.basic.api.request.var.VarAccountAuthorityReqVo;
import com.tenpay.risk.rap.basic.api.response.var.VarAccountAuthorityVo;
import com.tenpay.risk.rap.basic.core.Application;
import com.tenpay.risk.rap.basic.core.enums.EnumApproveStatus;
import com.tenpay.risk.rap.basic.core.enums.EnumVarOperateType;
import com.tenpay.risk.rap.basic.core.repository.var.repository.AccountAuthorityRecordRepository;
import com.tenpay.risk.rap.basic.core.service.approve.VarApproveService;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.verify;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment= SpringBootTest.WebEnvironment.RANDOM_PORT, classes = Application.class)
@AutoConfigureMockMvc
@TestPropertySource(locations = &quot;classpath:application.yml&quot;)
class AccountAuthorityServiceTest {


    @Autowired
    AccountAuthorityRecordRepository accountAuthorityRecordRepository;

    @Autowired
    AccountAuthorityService accountAuthorityService;

    @Autowired
    VarApproveService varApproveService;

    @Test
    public void should_get_1_account_when_apply_1_account(){
        AccountAuthorityApplyReqVo applyReqVo = new AccountAuthorityApplyReqVo();
        applyReqVo.setOperator(&quot;branchen&quot;);
        applyReqVo.setAccount(&quot;branchen@tenpay.com&quot;);
        applyReqVo.setObjectType(1);
        applyReqVo.setVarId(1001L);
        applyReqVo.setOperateType(EnumVarOperateType.QUERY.getCode());
        applyReqVo.setExistAccountList(new ArrayList&lt;&gt;());
        applyReqVo.setRemark(&quot;tianjia&quot;);
        accountAuthorityService.apply(applyReqVo);

        verify(varApproveService.accountApprovePropose(applyReqVo));
        accountAuthorityRecordRepository.query(&quot;branchen&quot;, 1, EnumVarOperateType.QUERY.getCode(),
                1001L, &quot;branchen@tenpay.com&quot;, EnumApproveStatus.PROCESSING.getCode());

        VarAccountAuthorityReqVo varAccountAuthorityReqVo = new VarAccountAuthorityReqVo();
        varAccountAuthorityReqVo.setAccount(&quot;branchen@tenpay.com&quot;);
        varAccountAuthorityReqVo.setObjectType(1);
        varAccountAuthorityReqVo.setVarId(1001L);
        varAccountAuthorityReqVo.setOperateType(EnumVarOperateType.QUERY.getCode());
        varAccountAuthorityReqVo.setOperator(&quot;branchen&quot;);
        ResponseEntity&lt;VarAccountAuthorityVo&gt; responseEntitys = accountAuthorityService.getAuthority(varAccountAuthorityReqVo);

        assertTrue(responseEntitys.getData().getAccountList().contains(&quot;branchen@tenpay.com&quot;));
    }

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[应用安全-敏感日志检测与屏蔽]]></title>
        <id>https://sisypheanchen.github.io/post/ying-yong-an-quan-min-gan-ri-zhi-jian-ce-yu-ping-bi/</id>
        <link href="https://sisypheanchen.github.io/post/ying-yong-an-quan-min-gan-ri-zhi-jian-ce-yu-ping-bi/">
        </link>
        <updated>2021-03-18T07:55:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="问题">问题</h1>
<p>敏感日志落地文件，存在被泄漏的风险。</p>
<h1 id="方案调研">方案调研</h1>
<h2 id="方案一">方案一</h2>
<p>直接在应用程序中的屏蔽敏感数据，需要日常编码中特别处理<br>
通常在开发环境下，我们需要敏感信息可见；通过硬编码方式处理不灵活</p>
<h2 id="本文方案">本文方案</h2>
<p>Log4j 提供了一种通过创建重写策略，在将数据记录到文件之前拦截数据，并进行处理，以实现重写；</p>
<p>Apache 的 Log4j 框架能够在应用程序执行期间更改消息记录器。可以定制重写策略，对不同的日志记录器进行拦截处理；</p>
<p>这样，我们既可以抽象敏感日志屏蔽方法，对业务代码零入侵；又可以在开发环境下使用独特的日志记录器，而不被屏蔽</p>
<h1 id="实现">实现</h1>
<h2 id="重写策略">重写策略</h2>
<p>需要创建一个实现 Apache RewritePolicy 类的 Java 类，就可以在记录之前访问日志数据，例如记录器名称、级别、消息、可抛出等......</p>
<p>这个策略使用正则查找与替换，对手机号，身份证号，银行卡号进行了查找与脱敏替换。</p>
<p>我们可以根据业务需求，更新或扩展重写策略</p>
<pre><code>package rap.interceptor;

import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.plugins.PluginFactory;
import org.apache.logging.log4j.core.impl.Log4jLogEvent;
import org.apache.logging.log4j.message.SimpleMessage;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Plugin(name = &quot;LogInterceptor&quot;, category = &quot;Core&quot;, elementType = &quot;rewritePolicy&quot;, printObject = true)
public class CustomLogInterceptor implements RewritePolicy {

    private static final String MOBILE = &quot;((13[0-9])|(14[5,7,9])|(15([0-3]|[5-9]))|(16[5,6])|(17[0-8])|(18[0-9])|(19[1、5、8、9]))\\d{8}&quot;;

    private static final String CREDIT_ID = &quot;[1-9][0-9]{5}(18|19|20)[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3}([0-9]|(X|x))|[1-9][0-9]{5}[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{2}[0-9]&quot;;

    private static final String BANK_CARD = &quot;([1-9]{1})(\\d{14}|\\d{18})&quot;;


    private CustomLogInterceptor() {
    }

    @PluginFactory
    public static CustomLogInterceptor createPolicy() {
        return new CustomLogInterceptor();
    }

    /**
     * @param message
     * @param regex
     * @return
     */
    private static String maskSenstive(String message, String regex) {
        if (message == null || message.length() == 0) {
            return message;
        }

        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE + Pattern.MULTILINE);
        Matcher m = p.matcher(message);

        while (m.find()) {
            message = message.replaceAll(m.group(), &quot;*****&quot;);
        }

        return message;
    }

    public static void main(String[] args) {
        String id = &quot;sda362202199410044636dasdadjjfdf36220219930304463215818165801&quot;;
        String mobile = &quot;asaswd415818165802232dsdswx&quot;;
        String bank = &quot;62349760150033627&quot;;
        System.out.println(maskSenstive(id, CREDIT_ID));
        System.out.println(maskSenstive(mobile, MOBILE));
        System.out.println(maskSenstive(bank, BANK_CARD));
    }

    @Override
    public LogEvent rewrite(LogEvent event) {
        String message = event.getMessage().getFormattedMessage();
        // manipulate  message here
        message = maskSenstive(message, CREDIT_ID);
        message = maskSenstive(message, BANK_CARD);
        message = maskSenstive(message, MOBILE);

        return Log4jLogEvent.newBuilder()
                .setLoggerName(event.getLoggerName())
                .setMarker(event.getMarker())
                .setLoggerFqcn(event.getLoggerFqcn())
                .setLevel(event.getLevel())
                .setMessage(new SimpleMessage(message))
                .setThrown(event.getThrown())
                .setContextMap(event.getContextMap())
                .setContextStack(event.getContextStack())
                .setThreadName(event.getThreadName())
                .setSource(event.getSource())
                .setTimeMillis(event.getTimeMillis())
                .build();
    }
}
</code></pre>
<h2 id="log4j-xml配置">Log4j XML配置</h2>
<p>下面是一个示例，说明如何连接 Log4j 的重写策略。</p>
<p>在这个例子中：</p>
<ul>
<li>AsyncRoot 引用 Rewrite Appender</li>
<li>Rewrite Appender 引用在 Configuration 节点中指定的包中找到的 Rewrite Policy</li>
<li>Rewrite Appender 引用了 Rolling File Appender</li>
</ul>
<p>运行应用程序时，记录器在写入控制台之后和写入日志文件之前被拦截。如果添加控制台 Appender 并从重写 Appender 引用它，控制台将每行显示两次日志，一次包含修改后的日志行，另一次没有。</p>
<p>因此，最好将其保留为滚动文件附加器，以便不会保留敏感数据并且控制台保持清晰。</p>
<pre><code>    &lt;!-- rewrite policy--&gt;
    &lt;Rewrite name=&quot;rewrite&quot;&gt;
      &lt;LogInterceptor &gt;&lt;/LogInterceptor&gt;
       &lt;!-- local CONSOLE, you can open it when debug in dev env --&gt;
      &lt;AppenderRef ref=&quot;CONSOLE&quot;&gt;&lt;/AppenderRef&gt;
      &lt;AppenderRef ref=&quot;requestAppender&quot;&gt;&lt;/AppenderRef&gt;
      &lt;AppenderRef ref=&quot;infoAppender&quot;&gt;&lt;/AppenderRef&gt;
      &lt;AppenderRef ref=&quot;errorAppender&quot;&gt;&lt;/AppenderRef&gt;
    &lt;/Rewrite&gt;

    &lt;root includeLocation=&quot;true&quot; level=&quot;${LOG_LEVEL}&quot;&gt;
      &lt;appender-ref ref=&quot;rewrite&quot;/&gt;
      &lt;appender-ref ref=&quot;logstashAppender&quot;/&gt;
    &lt;/root&gt;
</code></pre>
<h2 id="运行效果">运行效果</h2>
<p>图1是一个缓存查询的接口，账号是一个手机号码；<br>
<img src="https://sisypheanchen.github.io/post-images/1645430895565.png" alt="" loading="lazy"><br>
图2是控制台打印的日志，在请求参数捕获到后，会屏蔽掉手机号码信息<br>
<img src="https://sisypheanchen.github.io/post-images/1645430269612.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://sisypheanchen.github.io/post/hello-gridea/</id>
        <link href="https://sisypheanchen.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>